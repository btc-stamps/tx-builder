name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
      dry_run:
        description: 'Dry run (skip publishing)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    name: Release Package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          npm test
          npm run lint
          npm run typecheck

      - name: Build package
        run: npm run build

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version_bump
        run: |
          NEW_VERSION=$(npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version)
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "New version: ${NEW_VERSION}"

      - name: Sync version to deno.json
        run: node scripts/sync-version.js

      - name: Commit version bump
        run: |
          git add package.json deno.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version_bump.outputs.new_version }}"

      - name: Create git tag
        run: git tag ${{ steps.version_bump.outputs.new_version }}

      - name: Build package (post-version)
        run: npm run build

      - name: Publish to npm
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to JSR
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: deno publish
        # No env section needed - OIDC authentication is automatic with id-token: write permission

      - name: Push changes and tags
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          # Create a new branch for the version bump
          BRANCH_NAME="release/${{ steps.version_bump.outputs.new_version }}"
          git checkout -b $BRANCH_NAME

          # Push the branch and tag
          git push origin $BRANCH_NAME
          git push origin ${{ steps.version_bump.outputs.new_version }}

          # Create a PR using GitHub CLI
          gh pr create \
            --base main \
            --head $BRANCH_NAME \
            --title "chore: release ${{ steps.version_bump.outputs.new_version }}" \
            --body "Automated version bump to ${{ steps.version_bump.outputs.new_version }}

          This PR was created automatically by the release workflow after successfully publishing to npm and JSR.

          ## Published to:
          - âœ… npm: https://www.npmjs.com/package/@btc-stamps/tx-builder/v/${{ steps.version_bump.outputs.new_version }}
          - âœ… JSR: https://jsr.io/@btc-stamps/tx-builder@${{ steps.version_bump.outputs.new_version }}

          ## Changes:
          - Updated package.json version
          - Updated deno.json version
          - Updated package-lock.json

          Please merge this PR to keep the repository in sync with published versions."

          # Auto-merge the PR if possible (requires auto-merge to be enabled)
          gh pr merge $BRANCH_NAME --squash --auto || echo "Auto-merge not available, manual merge required"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        id: release_notes
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed

          ${COMMITS}

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${{ steps.version_bump.outputs.new_version }}

          ## Installation

          ### npm
          \`\`\`bash
          npm install @btc-stamps/tx-builder@${{ steps.version_bump.outputs.new_version }}
          \`\`\`

          ### JSR (Deno)
          \`\`\`typescript
          import { TransactionBuilder } from "jsr:@btc-stamps/tx-builder@${{ steps.version_bump.outputs.new_version }}";
          \`\`\`
          EOF

      - name: Create GitHub Release
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version_bump.outputs.new_version }}
          name: Release ${{ steps.version_bump.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version_bump.outputs.new_version, 'pre') }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dry run summary
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "ðŸš€ Dry run completed successfully!"
          echo "Version would be bumped to: ${{ steps.version_bump.outputs.new_version }}"
          echo "The following would be published:"
          echo "- npm: @btc-stamps/tx-builder@${{ steps.version_bump.outputs.new_version }}"
          echo "- JSR: jsr:@btc-stamps/tx-builder@${{ steps.version_bump.outputs.new_version }}"
          echo ""
          echo "To actually release, re-run this workflow without dry_run checked."

      - name: Rollback on failure
        if: failure() && !github.event.inputs.dry_run
        run: |
          echo "Release failed, cleaning up..."
          git tag -d ${{ steps.version_bump.outputs.new_version }} 2>/dev/null || true
          git reset --hard HEAD~1 2>/dev/null || true
          echo "Rollback completed"
