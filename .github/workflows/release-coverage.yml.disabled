name: Release with Coverage Validation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  pre-release-validation:
    name: Pre-Release Coverage Validation
    runs-on: ubuntu-latest
    
    outputs:
      coverage-passed: ${{ steps.coverage-check.outputs.passed }}
      test-count: ${{ steps.test-validation.outputs.count }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run comprehensive test suite
        run: npm run test:coverage
        
      - name: Validate coverage thresholds
        id: coverage-check
        run: |
          echo "Validating coverage thresholds for release..."
          
          # Extract coverage metrics
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          BRANCHES=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          LINES=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          
          echo "Coverage Metrics:"
          echo "- Statements: $STATEMENTS%"
          echo "- Branches: $BRANCHES%"
          echo "- Functions: $FUNCTIONS%"
          echo "- Lines: $LINES%"
          
          # Strict validation for release
          RELEASE_THRESHOLD_STATEMENTS=90
          RELEASE_THRESHOLD_BRANCHES=85
          RELEASE_THRESHOLD_FUNCTIONS=90
          RELEASE_THRESHOLD_LINES=90
          
          VALIDATION_PASSED="true"
          
          if (( $(echo "$STATEMENTS < $RELEASE_THRESHOLD_STATEMENTS" | bc -l) )); then
            echo "❌ Statements coverage below release threshold ($RELEASE_THRESHOLD_STATEMENTS%): $STATEMENTS%"
            VALIDATION_PASSED="false"
          fi
          
          if (( $(echo "$BRANCHES < $RELEASE_THRESHOLD_BRANCHES" | bc -l) )); then
            echo "❌ Branches coverage below release threshold ($RELEASE_THRESHOLD_BRANCHES%): $BRANCHES%"
            VALIDATION_PASSED="false"
          fi
          
          if (( $(echo "$FUNCTIONS < $RELEASE_THRESHOLD_FUNCTIONS" | bc -l) )); then
            echo "❌ Functions coverage below release threshold ($RELEASE_THRESHOLD_FUNCTIONS%): $FUNCTIONS%"
            VALIDATION_PASSED="false"
          fi
          
          if (( $(echo "$LINES < $RELEASE_THRESHOLD_LINES" | bc -l) )); then
            echo "❌ Lines coverage below release threshold ($RELEASE_THRESHOLD_LINES%): $LINES%"
            VALIDATION_PASSED="false"
          fi
          
          echo "passed=$VALIDATION_PASSED" >> $GITHUB_OUTPUT
          
          if [ "$VALIDATION_PASSED" = "true" ]; then
            echo "✅ All coverage thresholds met for release!"
          else
            echo "❌ Coverage validation failed - release blocked"
            exit 1
          fi
          
      - name: Validate UTXO protection tests
        id: test-validation
        run: |
          echo "Validating UTXO protection test coverage..."
          
          # Count UTXO-related tests
          UTXO_TEST_COUNT=$(grep -r "describe\|it\|test" tests/ | grep -i "utxo\|protection" | wc -l || echo "0")
          
          echo "count=$UTXO_TEST_COUNT" >> $GITHUB_OUTPUT
          
          if [ $UTXO_TEST_COUNT -ge 129 ]; then
            echo "✅ UTXO protection test coverage adequate: $UTXO_TEST_COUNT tests"
          else
            echo "❌ Insufficient UTXO protection test coverage: $UTXO_TEST_COUNT tests (minimum: 129)"
            exit 1
          fi
          
      - name: Run final validation
        run: |
          echo "Running final release validation..."
          
          # Run final validation script if it exists
          if [ -f "src/validation/final-validation-summary.ts" ]; then
            npm run validate:final
            echo "✅ Final validation completed"
          else
            echo "ℹ️ No final validation script found, skipping"
          fi
          
      - name: Generate release coverage report
        run: |
          echo "# 📊 Release Coverage Report" > release-coverage-report.md
          echo "" >> release-coverage-report.md
          echo "## Coverage Summary" >> release-coverage-report.md
          echo "" >> release-coverage-report.md
          
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          BRANCHES=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          LINES=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          
          echo "| Metric | Coverage | Release Threshold | Status |" >> release-coverage-report.md
          echo "|--------|----------|-------------------|--------|" >> release-coverage-report.md
          echo "| Statements | $STATEMENTS% | 90% | ✅ |" >> release-coverage-report.md
          echo "| Branches | $BRANCHES% | 85% | ✅ |" >> release-coverage-report.md
          echo "| Functions | $FUNCTIONS% | 90% | ✅ |" >> release-coverage-report.md
          echo "| Lines | $LINES% | 90% | ✅ |" >> release-coverage-report.md
          echo "" >> release-coverage-report.md
          
          echo "## Test Coverage" >> release-coverage-report.md
          echo "- Total UTXO Protection Tests: ${{ steps.test-validation.outputs.count }}" >> release-coverage-report.md
          echo "- Minimum Required: 129 ✅" >> release-coverage-report.md
          echo "" >> release-coverage-report.md
          
          echo "## Quality Assurance" >> release-coverage-report.md
          echo "- ✅ All coverage thresholds exceeded" >> release-coverage-report.md
          echo "- ✅ UTXO protection tests comprehensive" >> release-coverage-report.md
          echo "- ✅ Final validation passed" >> release-coverage-report.md
          echo "- ✅ Ready for production release" >> release-coverage-report.md
          
      - name: Upload release validation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-validation-${{ github.sha }}
          path: |
            coverage/
            release-coverage-report.md
          retention-days: 90

  build-and-test:
    name: Build and Test for Release
    runs-on: ubuntu-latest
    needs: pre-release-validation
    strategy:
      matrix:
        node-version: [18, 20, 22]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build package
        run: npm run build
        
      - name: Verify build integrity
        run: |
          echo "Verifying build outputs for Node.js ${{ matrix.node-version }}..."
          
          if [ -d "dist" ]; then
            echo "✅ dist/ directory created"
            echo "Build contents:"
            ls -la dist/
          else
            echo "❌ Build failed - dist/ directory not found"
            exit 1
          fi
          
      - name: Upload build artifacts
        if: matrix.node-version == 20
        uses: actions/upload-artifact@v3
        with:
          name: release-build-${{ github.sha }}
          path: |
            dist/
            lib/
          retention-days: 90

  deno-release-validation:
    name: Deno Release Validation
    runs-on: ubuntu-latest
    needs: pre-release-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x
          
      - name: Run Deno tests
        run: deno task test
        
      - name: Validate Deno formatting
        run: deno fmt --check
        
      - name: Validate Deno linting
        run: deno lint
        
      - name: Deno type check
        run: deno check src/**/*.ts

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-and-test, deno-release-validation]
    if: needs.pre-release-validation.outputs.coverage-passed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-build-${{ github.sha }}
          path: ./build-artifacts
          
      - name: Download validation artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-validation-${{ github.sha }}
          path: ./validation-artifacts
          
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          
      - name: Generate release notes
        run: |
          echo "# 🚀 tx-builder ${{ steps.version.outputs.version }}" > release-notes.md
          echo "" >> release-notes.md
          echo "## 📊 Quality Metrics" >> release-notes.md
          echo "" >> release-notes.md
          echo "✅ **Coverage Validation Passed**" >> release-notes.md
          echo "- Statements: 90%+ threshold met" >> release-notes.md
          echo "- Branches: 85%+ threshold met" >> release-notes.md
          echo "- Functions: 90%+ threshold met" >> release-notes.md
          echo "- Lines: 90%+ threshold met" >> release-notes.md
          echo "" >> release-notes.md
          echo "✅ **UTXO Protection Tests**" >> release-notes.md
          echo "- ${{ needs.pre-release-validation.outputs.test-count }}+ comprehensive tests" >> release-notes.md
          echo "" >> release-notes.md
          echo "✅ **Compatibility Verified**" >> release-notes.md
          echo "- Node.js 18.x, 20.x, 22.x" >> release-notes.md
          echo "- Deno 2.x" >> release-notes.md
          echo "" >> release-notes.md
          echo "## 📋 Release Validation" >> release-notes.md
          echo "" >> release-notes.md
          
          # Include coverage report if available
          if [ -f "validation-artifacts/release-coverage-report.md" ]; then
            cat validation-artifacts/release-coverage-report.md >> release-notes.md
          fi
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          files: |
            build-artifacts/**/*
            validation-artifacts/release-coverage-report.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish to npm
        if: startsWith(steps.version.outputs.version, 'v')
        run: |
          echo "Publishing to npm..."
          # Note: Add npm publish logic here if needed
          echo "✅ Ready for npm publish (manual step required)"
          
      - name: Release summary
        run: |
          echo "🎉 Release ${{ steps.version.outputs.version }} created successfully!"
          echo ""
          echo "📊 **Quality Assurance Summary:**"
          echo "✅ Coverage thresholds exceeded (90%+ statements, functions; 85%+ branches, lines)"
          echo "✅ ${{ needs.pre-release-validation.outputs.test-count }}+ UTXO protection tests passed"
          echo "✅ Multi-platform compatibility verified"
          echo "✅ Code quality gates passed"
          echo ""
          echo "🔗 **Release URL:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"